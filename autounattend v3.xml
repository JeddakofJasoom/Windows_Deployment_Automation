<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
	<!--https://schneegans.de/windows/unattend-generator/?LanguageMode=Unattended&UILanguage=en-US&Locale=en-US&Keyboard=00000409&GeoLocation=244&ProcessorArchitecture=amd64&BypassRequirementsCheck=true&ComputerNameMode=Random&CompactOsMode=Default&TimeZoneMode=Explicit&TimeZone=Central+Standard+Time&PartitionMode=Unattended&PartitionLayout=GPT&EspSize=300&RecoveryMode=Partition&RecoverySize=1000&WindowsEditionMode=Unattended&WindowsEdition=pro&UserAccountMode=Unattended&AccountName0=ITNGAdmin&AccountPassword0=password&AccountGroup0=Administrators&AccountName1=&AccountName2=&AccountName3=&AccountName4=&AutoLogonMode=Own&PasswordExpirationMode=Unlimited&LockoutMode=Default&HideFiles=Hidden&TaskbarSearch=Icon&DisableWidgets=true&ClassicContextMenu=true&LeftTaskbar=true&DeleteTaskbarIcons=true&HideTaskViewButton=true&AllowPowerShellScripts=true&PreventDeviceEncryption=true&HideEdgeFre=true&WifiMode=Skip&ExpressSettings=DisableAll&KeysMode=Skip&ColorMode=Default&WallpaperMode=Default&Remove3DViewer=true&RemoveBingSearch=true&RemoveClipchamp=true&RemoveCopilot=true&RemoveCortana=true&RemoveDevHome=true&RemoveFamily=true&RemoveFeedbackHub=true&RemoveGetHelp=true&RemoveMailCalendar=true&RemoveMaps=true&RemoveMediaFeatures=true&RemoveMixedReality=true&RemoveZuneVideo=true&RemoveNews=true&RemoveNotepadClassic=true&RemoveOneNote=true&RemoveOpenSSHClient=true&RemoveOutlook=true&RemovePeople=true&RemoveRecall=true&RemoveSkype=true&RemoveStepsRecorder=true&RemoveGetStarted=true&RemoveToDo=true&RemoveWallet=true&RemoveWindowsMediaPlayer=true&RemoveWordPad=true&RemoveXboxApps=true&RemoveYourPhone=true&StartTilesMode=Default&StartPinsMode=Empty&FirstLogonScript0=%23%23%23%23%23%23%23%23%23%23%23%23+START+ITNG+CUSTOM+LOGIN+SCRIPT+%23%23%23%23%23%23%23%23%23%23%23%23%0D%0A%0D%0A%23Make+sure+you+have+the+scripts+folder+with+all+packages+and+installers+listed+below+in+this+script+for+it+to+run+properly.+%0D%0A%24scripts+%3D+D%3A%5Cscripts%0D%0A%0D%0Acd+%24scripts%0D%0A%0D%0A%23+Define+the+log+file+path%0D%0A%24logFile+%3D+%22D%3A%5CScripts%5Csetup_log.txt%22%0D%0A%0D%0A%23+Function+to+log+messages%0D%0Afunction+Log-Message+%7B%0D%0A++++param+%28%0D%0A++++++++%5Bstring%5D%24message%0D%0A++++%29%0D%0A++++%24timestamp+%3D+Get-Date+-Format+%22yyyy-MM-dd+HH%3Amm%3Ass%22%0D%0A++++%24logEntry+%3D+%22%24timestamp+-+%24message%22%0D%0A++++Add-Content+-Path+%24logFile+-Value+%24logEntry%0D%0A%7D%0D%0A%0D%0A%23+Start+logging%0D%0ALog-Message+%22Script+execution+started.%22%0D%0A%0D%0Atry+%7B%0D%0A%0D%0A%23+Setup+PSWindowsUpdate+-+HAS+to+be+on+*new*+w11+23H2+machine+to+work+%0D%0ASet-ExecutionPolicy+unrestricted+-Force%0D%0AInstall-PackageProvider+-name+NuGet+-Minimumversion+2.8.5.201+-Force%0D%0AInstall-Module+PSWindowsUpdate+-Force%0D%0ALog-Message+%22PSwindows+update+complete%22%0D%0A%0D%0A%23+Fix+WinGet+-+make+sure+both+of+these+packages+are+in+the+.%5Cscripts+folder.+You+can+get+most+current+versions+from+GitHub.+%0D%0AAdd-AppPackage+-path+.%5CMicrosoft.UI.Xaml.2.8.appx%0D%0AAdd-AppPackage+-ForceApplicationShutdown+.%5Cwinget.msixbundle%0D%0ALog-Message+%22Winget+is+fixed%22%0D%0A%0D%0A%3C%23+Set+TimeZone+to+Eastern+Time%0D%0ASet-TimeZone+-Name+%22Eastern+Standard+Time%22%0D%0ALog-Message+%22EST+time+zone+set%22%0D%0A%23%3E%0D%0A%0D%0A%23+Set+TimeZone+to+Central+Time+%28only+used+for+select+clients+-+mainly+Warner+Law+Firm%29%0D%0ASet-TimeZone+-Name+%22Central+Standard+Time%22%0D%0ALog-Message+%22Central+time+zone+set%22%0D%0A%0D%0A%23+Disable+Windows+Firewalls%0D%0ASet-NetFirewallProfile+-Profile+Public+-Enabled+True%0D%0A%23comment+out+the+next+line+if+you+are+working+on+a+LAPTOP%2C+or+a+machine+that+will+not+have+a+physical+firewall.+%0D%0ASet-NetFirewallProfile+-Profile+Domain%2C+Private+-Enabled+False%0D%0ALog-Message+%22Disabled+Firewalls%22%0D%0A%0D%0A%23+Get+all+network+adapters+that+are+up%0D%0A%24adapters+%3D+Get-NetAdapter+%7C+Where-Object+%7B+%24_.Status+-eq+%27Up%27+%7D%0D%0A%0D%0A%23+Disable+IPv6+on+each+network+adapter%0D%0Aforeach+%28%24adapter+in+%24adapters%29+%7B%0D%0A++++Set-NetAdapterBinding+-Name+%24adapter.Name+-ComponentID+ms_tcpip6+-Enabled+%24false%0D%0A++++Log-Message+%22IPv6+has+been+disabled+on+the+adapter%3A+%24%28%24adapter.Name%29.%22%0D%0A%7D%0D%0ALog-Message+%22IPv6+has+been+disabled+on+all+network+adapters.%22%0D%0A%0D%0A%0D%0A%23+Set+active+power+plan%3A%0D%0A%0D%0A%23+Set+the+power+scheme+to+High+Performance+%28predefined+GUID%29%0D%0Apowercfg.exe+%2Fsetactive+8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c%0D%0A%0D%0A%23+Disable+sleep+on+AC+and+DC+%28battery%29+power%0D%0Apowercfg+-x+standby-timeout-ac+0+++++++%23+Disables+sleep+when+on+AC+power%0D%0Apowercfg+-x+standby-timeout-dc+0+++++++%23+Disables+sleep+when+on+battery+power%0D%0A%0D%0A%23+Set+the+display+to+turn+off+after+20+minutes+on+both+AC+and+DC+power%0D%0Apowercfg+-x+monitor-timeout-ac+20++++++%23+Turns+off+display+after+20+minutes+on+AC+power%0D%0Apowercfg+-x+monitor-timeout-dc+20++++++%23+Turns+off+display+after+20+minutes+on+battery+power%0D%0A%0D%0A%23+Disable+hibernate+on+both+AC+and+DC+power%0D%0Apowercfg+-x+hibernate-timeout-ac+0+++++%23+Disables+hibernate+when+on+AC+power%0D%0Apowercfg+-x+hibernate-timeout-dc+0+++++%23+Disables+hibernate+when+on+battery+power%0D%0A%0D%0A%23+Enable+RDP+connections+without+network+level+authentication%0D%0ASet-ItemProperty+-Path+%22HKLM%3A%5CSYSTEM%5CCurrentControlSet%5CControl%5CTerminal+Server%5CWinStations%5CRDP-Tcp%22+%60%0D%0A-Name+%22UserAuthentication%22+-Value+0+%0D%0A%23note%3A+do+not+use+a+property+type+switch+here+-+it+will+break+the+command.+%0D%0A%23note%3A+0+turns+ON+allowed+RDP+connections+AND+turns+off+NLA+requirement.+%0D%0A%09%23In+general%2C+this+is+the+value+we+want+on+managed+client+machines.+%0D%0A%23note%3A+2+turns+off+RDP+connections+entirely.+We+only+want+this+on+non-managed+client+machines.+%0D%0ALog-Message+%22Enabled+RDP+connections+without+network+level+authentication%22%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%23+Set+system+startup+entries+-+the+boot+menu+will+not+be+displayed%2C+and+the+default+operating+system+will+boot+immediately+without+delay.%0D%0Abcdedit.exe+%2FTimeout+0%0D%0ALog-Message+%22system+startup+set+to+boot+immediately+into+Windows%22%0D%0A%0D%0A%0D%0A%23+System+failure+options%0D%0Awmic.exe+recoveros+set+AutoReboot+%3D+True+%23enables+the+automatic+reboot+feature+after+a+system+failure+%28BSOD%29.%0D%0Awmic.exe+recoveros+set+DebugInfoType+%3D+0+%23sets+the+type+of+debugging+information+written+to+the+disk+when+the+system+crashes.+A+value+of+0+indicates+that+no+debugging+information+will+be+written.%0D%0A%0D%0A%23+Update+AV+Definitions%0D%0AUpdate-MpSignature%0D%0ALog-Message+%22AV+signature+definitions+update+completed+successfully%22%0D%0A%0D%0A%23+Run+WinGet+to+install+standard+applications+%0D%0Awinget.exe+install+microsoft.powershell+%2D%2Dscope+machine%0D%0ALog-Message+%22Powershell+7+installed+successfully.%22%0D%0Awinget.exe+install+Google.Chrome+%2D%2Dscope+machine%0D%0ALog-Message+%22Google+Chrome+installed+successfully.%22%0D%0Awinget.exe+install+Mozilla.Firefox+%2D%2Dscope+machine%0D%0ALog-Message+%22Firefox+installed+successfully.%22%0D%0Awinget.exe+install+adobe.acrobat.reader.64-bit+%2D%2Dscope+machine%0D%0ALog-Message+%22Adobe+Reader+installed+successfully.%22%0D%0Awinget+install+-e+%2D%2Did+Dell.CommandUpdate+%2D%2Dscope+machine%0D%0ALog-Message+%22Dell+Command+installed+successfully.%22%0D%0Awinget.exe+upgrade+%2D%2Dall%0D%0ALog-Message+%22All+software+upgrades+installed+successfully.%22%0D%0A%0D%0A%23install+Sonicwall+NetExtender.+%2Fqn+%3D+silent+install+%7C+%2Fnorestart+%3D+does+not+restart+PC+after+install+%7C+%0D%0A%09%23+server+%3D+public+IP+address+%7C+domain+%3D+LocalDomain+always+%7C+ALLUSERS%3D2+installs+this+for+all+users+on+the+PC.+Note%3A+case+sensitive+command.+%0D%0Amsiexec.exe+%2Fi+%E2%80%9CD%3A%5CScripts%5CNetExtender-x64-10.2.341.msi%E2%80%9D+%2Fqn+%2Fnorestart+server%3D143.59.12.134%3A4433+domain%3DLocalDomain+EDITABLE%3DTRUE+netlogon%3Dtrue+ALLUSERS%3D2%0D%0A%0D%0A%23+Run+Windows+Update%0D%0AGet-WindowsUpdate+-AcceptAll+-Install+%23+-AutoReboot%0D%0ALog-Message+%22Starting+Windows+Updates+and+will+automatically+reboot+the+machine+when+complete.%22%0D%0A%0D%0A%0D%0A%23+Final+message%0D%0ALog-Message+%22All+tasks+completed+successfully.%22%0D%0A%7D%0D%0Acatch+%7B%0D%0A++++Log-Message+%22An+error+occurred%3A+%24_%22%0D%0A%7D%0D%0A%0D%0A%23+End+logging%0D%0ALog-Message+%22Script+execution+ended.%22%0D%0APause&FirstLogonScriptType0=Ps1&WdacMode=Skip-->
	<settings pass="offlineServicing"></settings>
	
	
	
	
	
	
	
	
OLD	<settings pass="windowsPE">
		<component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
			 <RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Description>Switch to legacy Setup</Description>
						<Order>1</Order>
							<Path>reg add "HKEY_LOCAL_MACHINE\SYSTEM\Setup" /v CmdLine /t REG_SZ /d "X:\sources\setup.exe" /f
							</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
			<SetupUILanguage>
				<UILanguage>en-US</UILanguage>
			</SetupUILanguage>
			<InputLocale>0409:00000409</InputLocale>
			<SystemLocale>en-US</SystemLocale>
			<UILanguage>en-US</UILanguage>
			<UserLocale>en-US</UserLocale>
		</component>
		
		<component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<ImageInstall>
				<OSImage>
					<InstallTo>
						<DiskID>0</DiskID>
						<PartitionID>3</PartitionID>
					</InstallTo>
				</OSImage>
			</ImageInstall>
			<UserData>
				<ProductKey>
					<Key>VK7JG-NPHTM-C97JM-9MPGT-3V66T</Key>
				</ProductKey>
				<AcceptEula>true</AcceptEula>
			</UserData>
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo SELECT DISK=0&amp;echo CLEAN&amp;echo CONVERT GPT&amp;echo CREATE PARTITION EFI SIZE=300&amp;echo FORMAT QUICK FS=FAT32 LABEL="System"&amp;echo CREATE PARTITION MSR SIZE=16)"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo CREATE PARTITION PRIMARY&amp;echo SHRINK MINIMUM=1000&amp;echo FORMAT QUICK FS=NTFS LABEL="Windows"&amp;echo CREATE PARTITION PRIMARY&amp;echo FORMAT QUICK FS=NTFS LABEL="Recovery")"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo SET ID="de94bba4-06d1-4d40-a16a-bfd50179d6ac"&amp;echo GPT ATTRIBUTES=0x8000000000000001)"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>cmd.exe /c "diskpart.exe /s "X:\diskpart.txt" &gt;&gt;"X:\diskpart.log" || ( type "X:\diskpart.log" &amp; echo diskpart encountered an error. &amp; pause &amp; exit /b 1 )"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassTPMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>6</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassSecureBootCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>7</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassRAMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
	</settings>
	<settings pass="generalize"></settings>
	<settings pass="specialize">
		<component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>powershell.exe -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\Specialize.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\DefaultUser.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>reg.exe unload "HKU\DefaultUser"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<TimeZone>Central Standard Time</TimeZone>
		</component>
	</settings>
	<settings pass="auditSystem"></settings>
	<settings pass="auditUser"></settings>
	<settings pass="oobeSystem">
		<component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<InputLocale>0409:00000409</InputLocale>
			<SystemLocale>en-US</SystemLocale>
			<UILanguage>en-US</UILanguage>
			<UserLocale>en-US</UserLocale>
		</component>
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UserAccounts>
				<LocalAccounts>
					<LocalAccount wcm:action="add">
						<Name>ITNGAdmin</Name>
						<Group>Administrators</Group>
						<Password>
							<Value>password</Value>
							<PlainText>true</PlainText>
						</Password>
					</LocalAccount>
				</LocalAccounts>
			</UserAccounts>
			<AutoLogon>
				<Username>ITNGAdmin</Username>
				<Enabled>true</Enabled>
				<LogonCount>1</LogonCount>
				<Password>
					<Value>password</Value>
					<PlainText>true</PlainText>
				</Password>
			</AutoLogon>
			<OOBE>
				<ProtectYourPC>3</ProtectYourPC>
				<HideEULAPage>true</HideEULAPage>
				<HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
				<HideOnlineAccountScreens>false</HideOnlineAccountScreens>
			</OOBE>
			<FirstLogonCommands>
				<SynchronousCommand wcm:action="add">
					<Order>1</Order>
					<CommandLine>powershell.exe -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\FirstLogon.ps1' -Raw | Invoke-Expression;"</CommandLine>
				</SynchronousCommand>
			</FirstLogonCommands>
		</component>
	</settings>
	<Extensions xmlns="https://schneegans.de/windows/unattend-generator/">
		<ExtractScript>
param(
    [xml] $Document
);

$scriptsDir = 'C:\Windows\Setup\Scripts\';
foreach( $file in $Document.unattend.Extensions.File ) {
    $path = [System.Environment]::ExpandEnvironmentVariables(
        $file.GetAttribute( 'path' )
    );
    if( $path.StartsWith( $scriptsDir ) ) {
        mkdir -Path $scriptsDir -ErrorAction 'SilentlyContinue';
    }
    $encoding = switch( [System.IO.Path]::GetExtension( $path ) ) {
        { $_ -in '.ps1', '.xml' } { [System.Text.Encoding]::UTF8; }
        { $_ -in '.reg', '.vbs', '.js' } { [System.Text.UnicodeEncoding]::new( $false, $true ); }
        default { [System.Text.Encoding]::Default; }
    };
    [System.IO.File]::WriteAllBytes( $path, ( $encoding.GetPreamble() + $encoding.GetBytes( $file.InnerText.Trim() ) ) );
}
		</ExtractScript>
		<File path="C:\Windows\Temp\remove-packages.ps1">
$selectors = @(
	'Microsoft.Microsoft3DViewer';
	'Microsoft.BingSearch';
	'Clipchamp.Clipchamp';
	'Microsoft.549981C3F5F10';
	'Microsoft.Windows.DevHome';
	'MicrosoftCorporationII.MicrosoftFamily';
	'Microsoft.WindowsFeedbackHub';
	'Microsoft.GetHelp';
	'Microsoft.Getstarted';
	'microsoft.windowscommunicationsapps';
	'Microsoft.WindowsMaps';
	'Microsoft.MixedReality.Portal';
	'Microsoft.BingNews';
	'Microsoft.Office.OneNote';
	'Microsoft.OutlookForWindows';
	'Microsoft.People';
	'Microsoft.SkypeApp';
	'Microsoft.Todos';
	'Microsoft.Wallet';
	'Microsoft.Xbox.TCUI';
	'Microsoft.XboxApp';
	'Microsoft.XboxGameOverlay';
	'Microsoft.XboxGamingOverlay';
	'Microsoft.XboxIdentityProvider';
	'Microsoft.XboxSpeechToTextOverlay';
	'Microsoft.GamingApp';
	'Microsoft.YourPhone';
	'Microsoft.ZuneVideo';
);
$getCommand = {
  Get-AppxProvisionedPackage -Online;
};
$filterCommand = {
  $_.DisplayName -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Remove-AppxProvisionedPackage -AllUsers -Online -ErrorAction 'Continue';
  }
};
$type = 'Package';
$logfile = 'C:\Windows\Temp\remove-packages.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Temp\remove-caps.ps1">
$selectors = @(
	'Microsoft.Windows.Notepad';
	'Microsoft.Windows.Notepad.System';
	'OpenSSH.Client';
	'App.StepsRecorder';
	'Media.WindowsMediaPlayer';
	'Microsoft.Windows.WordPad';
);
$getCommand = {
  Get-WindowsCapability -Online | Where-Object -Property 'State' -NotIn -Value @(
    'NotPresent';
    'Removed';
  );
};
$filterCommand = {
  ($_.Name -split '~')[0] -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Remove-WindowsCapability -Online -ErrorAction 'Continue';
  }
};
$type = 'Capability';
$logfile = 'C:\Windows\Temp\remove-caps.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Temp\remove-features.ps1">
$selectors = @(
	'MediaPlayback';
	'Recall';
);
$getCommand = {
  Get-WindowsOptionalFeature -Online | Where-Object -Property 'State' -NotIn -Value @(
    'Disabled';
    'DisabledWithPayloadRemoved';
  );
};
$filterCommand = {
  $_.FeatureName -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Disable-WindowsOptionalFeature -Online -Remove -NoRestart -ErrorAction 'Continue';
  }
};
$type = 'Feature';
$logfile = 'C:\Windows\Temp\remove-features.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\TaskbarIcons.ps1">
Remove-ItemProperty -Path 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Taskband' -Name '*';
		</File>
		<File path="C:\Windows\Setup\Scripts\SetStartPins.ps1">
$json = '{"pinnedList":[]}';
if( [System.Environment]::OSVersion.Version.Build -lt 20000 ) {
	return;
}
$key = 'Registry::HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start';
New-Item -Path $key -ItemType 'Directory' -ErrorAction 'SilentlyContinue';
Set-ItemProperty -LiteralPath $key -Name 'ConfigureStartPins' -Value $json -Type 'String';
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-01.ps1">
############ START ITNG CUSTOM LOGIN SCRIPT ############

#Make sure you have the scripts folder with all packages and installers listed below in this script for it to run properly. 
$scripts = "D:\scripts"

cd $scripts

# Define the log file path
$logFile = "D:\Scripts\setup_log.txt"

# Function to log messages
function Log-Message {
    param (
        [string]$message
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "$timestamp - $message"
    Add-Content -Path $logFile -Value $logEntry
}

# Start logging
Log-Message "Script execution started."

try {

# Setup PSWindowsUpdate - HAS to be on *new* w11 23H2 machine to work 
Set-ExecutionPolicy unrestricted -Force
Install-PackageProvider -name NuGet -Minimumversion 2.8.5.201 -Force
Install-Module PSWindowsUpdate -Force
Log-Message "PSwindows update complete"

# Fix WinGet - make sure both of these packages are in the .\scripts folder. You can get most current versions from GitHub. 
Add-AppPackage -path .\Microsoft.UI.Xaml.2.8.appx
Add-AppPackage -ForceApplicationShutdown .\winget.msixbundle
Log-Message "Winget is fixed"

<# Set TimeZone to Eastern Time
Set-TimeZone -Name "Eastern Standard Time"
Log-Message "EST time zone set"
#>

# Set TimeZone to Central Time (only used for select clients - mainly Warner Law Firm)
Set-TimeZone -Name "Central Standard Time"
Log-Message "Central time zone set"

# Disable Windows Firewalls
Set-NetFirewallProfile -Profile Public -Enabled True
#comment out the next line if you are working on a LAPTOP, or a machine that will not have a physical firewall. 
Set-NetFirewallProfile -Profile Domain, Private -Enabled False
Log-Message "Disabled Firewalls"

# Get all network adapters that are up
$adapters = Get-NetAdapter | Where-Object { $_.Status -eq 'Up' }

# Disable IPv6 on each network adapter
foreach ($adapter in $adapters) {
    Set-NetAdapterBinding -Name $adapter.Name -ComponentID ms_tcpip6 -Enabled $false
    Log-Message "IPv6 has been disabled on the adapter: $($adapter.Name)."
}
Log-Message "IPv6 has been disabled on all network adapters."


# Set active power plan:

# Set the power scheme to High Performance (predefined GUID)
powercfg.exe /setactive 8c5e7fda-e8bf-4a96-9a85-a6e23a8c635c

# Disable sleep on AC and DC (battery) power
powercfg -x standby-timeout-ac 0       # Disables sleep when on AC power
powercfg -x standby-timeout-dc 0       # Disables sleep when on battery power

# Set the display to turn off after 20 minutes on both AC and DC power
powercfg -x monitor-timeout-ac 20      # Turns off display after 20 minutes on AC power
powercfg -x monitor-timeout-dc 20      # Turns off display after 20 minutes on battery power

# Disable hibernate on both AC and DC power
powercfg -x hibernate-timeout-ac 0     # Disables hibernate when on AC power
powercfg -x hibernate-timeout-dc 0     # Disables hibernate when on battery power

# Enable RDP connections without network level authentication
Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" `
-Name "UserAuthentication" -Value 0 
#note: do not use a property type switch here - it will break the command. 
#note: 0 turns ON allowed RDP connections AND turns off NLA requirement. 
	#In general, this is the value we want on managed client machines. 
#note: 2 turns off RDP connections entirely. We only want this on non-managed client machines. 
Log-Message "Enabled RDP connections without network level authentication"




# Set system startup entries - the boot menu will not be displayed, and the default operating system will boot immediately without delay.
bcdedit.exe /Timeout 0
Log-Message "system startup set to boot immediately into Windows"


# System failure options
wmic.exe recoveros set AutoReboot = True #enables the automatic reboot feature after a system failure (BSOD).
wmic.exe recoveros set DebugInfoType = 0 #sets the type of debugging information written to the disk when the system crashes. A value of 0 indicates that no debugging information will be written.

# Update AV Definitions
Update-MpSignature
Log-Message "AV signature definitions update completed successfully"

# Run WinGet to install standard applications 
winget.exe install microsoft.powershell --scope machine
Log-Message "Powershell 7 installed successfully."
winget.exe install Google.Chrome --scope machine
Log-Message "Google Chrome installed successfully."
winget.exe install Mozilla.Firefox --scope machine
Log-Message "Firefox installed successfully."
winget.exe install adobe.acrobat.reader.64-bit --scope machine
Log-Message "Adobe Reader installed successfully."
winget install -e --id Dell.CommandUpdate --scope machine
Log-Message "Dell Command installed successfully."
winget.exe upgrade --all
Log-Message "All software upgrades installed successfully."

#install Sonicwall NetExtender. /qn = silent install | /norestart = does not restart PC after install | 
	# server = public IP address | domain = LocalDomain always | ALLUSERS=2 installs this for all users on the PC. Note: case sensitive command. 
msiexec.exe /i "D:\Scripts\NetExtender-x64-10.2.341.msi" /qn /norestart server=143.59.12.134:4433 domain=LocalDomain EDITABLE=TRUE netlogon=true ALLUSERS=2

# Run Windows Update
Get-WindowsUpdate -AcceptAll -Install # -AutoReboot
Log-Message "Starting Windows Updates and will automatically reboot the machine when complete."


# Final message
Log-Message "All tasks completed successfully."
}
catch {
    Log-Message "An error occurred: $_"
}

# End logging
Log-Message "Script execution ended."
Pause
		</File>
		<File path="C:\Windows\Setup\Scripts\Specialize.ps1">
$scripts = @(
	{
		Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\DevHomeUpdate' -Force -ErrorAction 'SilentlyContinue';
	};
	{
		Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\OutlookUpdate' -Force -ErrorAction 'SilentlyContinue';
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Temp\remove-packages.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Temp\remove-caps.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Temp\remove-features.ps1' -Raw | Invoke-Expression;
	};
	{
		net.exe accounts /maxpwage:UNLIMITED;
	};
	{
		Set-ExecutionPolicy -Scope 'LocalMachine' -ExecutionPolicy 'RemoteSigned' -Force;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Dsh" /v AllowNewsAndInterests /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\BitLocker" /v "PreventDeviceEncryption" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Edge" /v HideFirstRunExperience /t REG_DWORD /d 1 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetStartPins.ps1' -Raw | Invoke-Expression;
	};
);

&amp; {
	[float] $complete = 0;
	[float] $increment = 100 / $scripts.Count;
	foreach( $script in $scripts ) {
		Write-Progress -Activity 'Running scripts to customize your Windows installation. Do not close this window.' -PercentComplete $complete;
		&amp; $script;
		$complete += $increment;
	}
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\Specialize.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\UserOnce.ps1">
$scripts = @(
	{
		Get-AppxPackage -Name 'Microsoft.Windows.Ai.Copilot.Provider' | Remove-AppxPackage;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\TaskbarIcons.ps1' -Raw | Invoke-Expression;
	};
	{
		$params = @{
			Path = 'Registry::HKCU\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32';
			ErrorAction = 'SilentlyContinue';
			Force = $true;
		};
		New-Item @params;
		Set-ItemProperty @params -Name '(Default)' -Value '' -Type 'String';
	};
	{
		Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Search' -Name 'SearchboxTaskbarMode' -Type 'DWord' -Value 1;
	};
	{
		Get-Process -Name 'explorer' -ErrorAction 'SilentlyContinue' | Where-Object -FilterScript {
			$_.SessionId -eq ( Get-Process -Id $PID ).SessionId;
		} | Stop-Process -Force;
	};
);

&amp; {
	[float] $complete = 0;
	[float] $increment = 100 / $scripts.Count;
	foreach( $script in $scripts ) {
		Write-Progress -Activity 'Running scripts to configure this user account. Do not close this window.' -PercentComplete $complete;
		&amp; $script;
		$complete += $increment;
	}
} *&gt;&amp;1 &gt;&gt; "$env:TEMP\UserOnce.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\DefaultUser.ps1">
$scripts = @(
	{
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\WindowsCopilot" /v TurnOffWindowsCopilot /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v ShowTaskViewButton /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v TaskbarAl /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\RunOnce" /v "UnattendedSetup" /t REG_SZ /d "powershell.exe -NoProfile -Command \""Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\UserOnce.ps1' -Raw | Invoke-Expression;\""" /f;
	};
);

&amp; {
	[float] $complete = 0;
	[float] $increment = 100 / $scripts.Count;
	foreach( $script in $scripts ) {
		Write-Progress -Activity 'Running scripts to modify the default user&#x2019;&#x2019;s registry hive. Do not close this window.' -PercentComplete $complete;
		&amp; $script;
		$complete += $increment;
	}
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\DefaultUser.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\FirstLogon.ps1">
$scripts = @(
	{
		Set-ItemProperty -LiteralPath 'Registry::HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name 'AutoLogonCount' -Type 'DWord' -Force -Value 0;
	};
	{
		cmd.exe /c "rmdir C:\Windows.old";
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\unattend-01.ps1' -Raw | Invoke-Expression;
	};
);

&amp; {
	[float] $complete = 0;
	[float] $increment = 100 / $scripts.Count;
	foreach( $script in $scripts ) {
		Write-Progress -Activity 'Running scripts to finalize your Windows installation. Do not close this window.' -PercentComplete $complete;
		&amp; $script;
		$complete += $increment;
	}
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\FirstLogon.log";
		</File>
	</Extensions>
</unattend>